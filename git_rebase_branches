#!/bin/bash
#
# rebase each branch on top of $1 or $BASE_BRANCH_DEFAULT
#

# configurable vars
BASE_BRANCH_DEFAULT="master"



. $( dirname ${BASH_SOURCE[0]} )/git_functions.sh  || {
  echo -e "\n\tERR: cannot import git_functions.sh. Exiting\n"
  exit 1
}



[ -n "$1" ] && BASE_BRANCH=$1 || BASE_BRANCH=$BASE_BRANCH_DEFAULT

if [ ! -e ".git" ] ; then
  echo "the current dir is not versioned by git"
  exit 1
fi

git_save_state

# first checkout $BASE_BRANCH for ease of parsing the name of the branches
# (otherwise in $branches we'd get the element '*')
git co $BASE_BRANCH

branches=$( git branch | fgrep -v $BASE_BRANCH | xargs )

for branch in $branches ; do
  clear
  read -p "rebase $branch on top of $BASE_BRANCH? [Y/N] " wanna_rebase
  if [[ "$wanna_rebase" =~ ^[nN][oO]?$ ]] ; then
    continue
  fi

  git co $branch
  git rebase $BASE_BRANCH

  if [ "$?" -ne 0 ] ; then
    echo -e "\n\ncrap. going to abort the rebase.\n"
    FAILED_REBASES="$FAILED_REBASES $branch"
    read
    git rebase --abort
  fi

  # pause so that the user can see what happened
  echo -e "\n\n"
  read -p "press any key to continue"
done

# finally switch back to the original checked out branch
git_restore_state

if [ -n "$FAILED_REBASES" ] ; then
  echo -e "\n\nrebase failed for the following branches:"
  for branch in $FAILED_REBASES ; do
    echo " - $branch"
  done
fi

exit 0
