#!/bin/bash
#
# rebase each branch on top of $1 or $BASE_BRANCH_DEFAULT
#

# configurable vars
BASE_BRANCH_DEFAULT="master"


. $( dirname ${BASH_SOURCE[0]} )/git_functions.sh

[ -n "$1" ] && BASE_BRANCH=$1 || BASE_BRANCH=$BASE_BRANCH_DEFAULT

git_save_state

# first checkout master for ease of parsing the name of the branches
# (otherwise in $branches we'd get the element '*')
git co $BASE_BRANCH

branches=$( git branch | fgrep -v $BASE_BRANCH | xargs )

for branch in $branches ; do
  clear
  read -p "going to rebase $branch on top of $BASE_BRANCH. Skip? [n] ^C to abort " skip
  if [ "$skip" = "y" ] ; then
    continue
  fi

  git co $branch
  git rebase $BASE_BRANCH

  if [ "$?" -ne 0 ] ; then
    echo -e "\n\ncrap. going to abort the rebase.\n"
    FAILED_REBASES=$FAILED_REBASES $branch
    read
    git rebase --abort
  fi

  # pause so that the user can see what happened
  echo -e "\n\n"
  read -p "press any key to continue"
done

# finally switch back to the original checked out branch
git_restore_state

