#!/bin/bash
#
# Update master in the current dir by pulling from origin or the given remote.
# Before pulling, stash any work in progress, and stash-pop it back once done, thus restoring
# the original state of the working directory.
# Can also handle git submodules: it will run itself for each one of them.
#
# It also handles any "abnormal" termination like CTRL-C: in such cases it will stash back.
#
# Usage: $0 [remote_name]
# 
# Detailed sequence of steps:
#  - stash
#  - co master
#  - pull $REMOTE master
#  - co $ORIGINAL_BRANCH
#  - stash pop
#  - repeat all of the above steps for each git submodule (if any)
#

# configurable vars
DEFAULT_REMOTE=origin


# internal vars
[ -n "$1" ] && REMOTE=$1 || REMOTE=$DEFAULT_REMOTE
PROJECT=$( basename $PWD )


. $( dirname ${BASH_SOURCE[0]} )/git_functions.sh  || {
  echo -e "\n\tERR: cannot import git_functions.sh. Exiting\n"
  exit 1
}



if [ ! -e ".git" ] ; then
  echo "the current dir is not versioned by git"
  exit 1
fi


git status &&
git_save_state &&
git co master &&
git pull "$REMOTE" master || {
  ERR_GIT_PULL=1
}
git_restore_state || {
  ERR_GIT_RESTORE=1
}

# if this project contains submodules, recursively pull for each one of them
if [ -e .gitmodules ] ; then
  echo
  git submodule foreach $( basename $0 ) || { # recursive call
    ERR_GIT_SUBMODULE=1
  }
fi


## finally report any error occured
echo
if [[ -n "$ERR_GIT_PULL" || -n "$ERR_GIT_RESTORE" || -n "$ERR_GIT_SUBMODULE" ]] ; then
  echo " **** WARNING **** some errs occured for project $PROJECT"
  [ -n "$ERR_GIT_PULL" ] && echo "errors occured during git pull"
  [ -n "$ERR_GIT_RESTORE" ] && echo "errors occured during git restore"
  [ -n "$ERR_GIT_SUBMODULE" ] && echo "errors occured during 'git submodule foreach $( basename $0 )'"
  echo
  exit 1
else
  exit 0
fi

